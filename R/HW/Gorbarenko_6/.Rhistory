install.packages("eurostat")
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
install.packages("eurostat")
library(eurostat)
# : tag00115
tables = c('tag00115')
#trades = lapply(tables, function(X) { # прочтем несколько таблиц в список
#  get_eurostat(X) %>% label_eurostat()
#})
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
select(-geo) %>%
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
trades = lapply(tables, function(X) { # прочтем несколько таблиц в список
get_eurostat(X) %>% label_eurostat()
}) %>%
bind_rows() %>%
select(-geo) %>%
filter(stringr::str_detect(indic_et, 'Exports in|Imports in'))  %>% # оставим только экспорт и импорт
pivot_wider(names_from = indic_et, values_from = values)
View(trades)
trades = lapply(tables, function(X) { # прочтем несколько таблиц в список
get_eurostat(X) %>% label_eurostat()
}) %>%
bind_rows() %>%
select(-geo) %>%
filter(stringr::str_detect(indic_et, 'Exports in|Imports in'))  %>% # оставим только экспорт и импорт
pivot_wider(names_from = indic_et, values_from = values) %>%
mutate(partner = as.factor(partner))
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
library(eurostat)
tables = c('tet00034', 'tet00033', 'tet00032', 'tet00031','tet00030', 'tet00029')
trades = lapply(tables, function(X) { # прочтем несколько таблиц в список
get_eurostat(X) %>% label_eurostat()
}) %>%
bind_rows() %>% # объединим прочитанные таблицы в одну
select(-geo) %>% # убираем столбец с территорией торговли, т.к. там только Евросоюз
filter(stringr::str_detect(indic_et, 'Exports in|Imports in')) %>% # оставим только экспорт и импорт
pivot_wider(names_from = indic_et, values_from = values) %>%  # вынесем данные по экспорту и импорту в отдельные переменные
rename(export = `Exports in million of ECU/EURO`, # дадим им краткие названия
import = `Imports in million of ECU/EURO`) %>%
mutate(partner = as.factor(partner))
View(trades)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
View(tradesss)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
View(tradesss)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
View(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
trades = lapply(tables, function(X) { # прочтем несколько таблиц в список
get_eurostat(X) %>% label_eurostat()
}) %>%
bind_rows() %>%
select(-strucpro)%>% # объединим прочитанные таблицы в одну #%>%
filter(stringr::str_detect(crops, 'Carrots|Tomatoes|Cucumbers|Onions|Carrots')) %>%
pivot_wider(names_from = crops, values_from = values) %>% # оставим только экспорт и импорт
#pivot_wider(names_from = indic_et, values_from = values) #%>%
#mutate(partner = as.factor(partner))
str(trades)
#rename(export = `Exports in million of ECU/EURO`, # дадим им краткие названия
#      import = `Imports in million of ECU/EURO`) %>%
#mutate(partner = as.factor(partner))
str(tradesss)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
View(tradesss)
library(tidyr)
trades = lapply(tables, function(X) { # прочтем несколько таблиц в список
get_eurostat(X) %>% label_eurostat()
}) %>%
bind_rows() %>%
select(-strucpro)%>% # объединим прочитанные таблицы в одну #%>%
filter(stringr::str_detect(crops, 'Carrots|Tomatoes|Cucumbers|Onions|Carrots')) %>%
pivot_wider(names_from = crops, values_from = values) %>% # оставим только экспорт и импорт
#pivot_wider(names_from = indic_et, values_from = values) #%>%
#mutate(partner = as.factor(partner))
str(trades)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 course/R/HW/Gorbarenko_6/6.R', echo=TRUE)
View(trades)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(eurostat)
tables = c('tag00115')
trades = lapply(tables, function(X) {
get_eurostat(X) %>% label_eurostat()
}) %>% # подготовка данных
bind_rows() %>%
select(-strucpro)%>%
filter(stringr::str_detect(crops, 'Carrots|Tomatoes|Cucumbers|Onions|Carrots')) %>%
filter(!stringr::str_detect(geo, 'European Union')) %>%
mutate(geo = as.factor(geo))
trades %>% # построение первого графика
dplyr::filter(time == as.Date('2010-01-01')) %>%
ggplot(mapping = aes(x = geo, y = values, fill = crops)) +
geom_col(color = 'black', size = 0.1) +
coord_flip() + ggtitle('Harvested area of tomatoes, cucumbers, carrot and onions in Europe') +
xlab('Country') + ylab('Thausand ga')
