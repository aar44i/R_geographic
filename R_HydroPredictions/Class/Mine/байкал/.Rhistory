T = round(T, 2)
T = round(T, 100)
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
S = D * 6371
T = S / 850
S = round(S, 0)
T = round(T, 100)
T = round(T, 1)
T = round(T, 10)
T = round(T, 10)
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
T = S / 850
S = round(S, 0)
T = round(T, 10)
T = S / 850
S = round(S, 0)
T = round(T, 2)
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
CrossMer
if (long_START < 0) & (long_FINISH < 0 ) {
CrossMer = 1
} else {
CrossMer = 0
}
Answer
T = round(T, 2) # с округлением до 0.5 пока не справился
if (long_START < 0 | long_FINISH < 0) {
if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
}
} else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и не пересекает 180-й меридиан."
}
Answer
lat_START = as.numeric(readline('Введите широту начальной точки:'))
long_START = as.numeric(readline('Введите долготу начальной точки:'))
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0){
} else if (long_START < 0 | long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
}
Answer
Answer
if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0)  {
} else if (long_START < 0 | long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
}
Answer
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
lat_START = as.numeric(readline('Введите широту начальной точки:'))
20
lat_START = as.numeric(readline('Введите широту начальной точки:'))
long_START = as.numeric(readline('Введите долготу начальной точки:'))
lat_FINISH = as.numeric(readline('Введите широту конечной точки:'))
long_FINISH = as.numeric(readline('Введите долготу конечной точки:'))
D = acos(sin(lat_START) * sin(lat_FINISH) + cos(lat_START) * cos(lat_FINISH) * cos( long_START - long_FINISH ))
S = D * 6371
T = S / 850
S = round(S, 0)
T = round(T, 2) # с округлением до 0.5 пока не справился
#  if (long_START < 0 | long_FINISH < 0) {
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#   } else {
#    Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#   } else {
#    Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
# }
#  } else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#   } else {
#    Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
# }
#  } else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
#   Answer = "Маршрут полета не пересекает нулевой меридиан и не пересекает 180-й меридиан."
#  }
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
lat_START = as.numeric(readline('Введите широту начальной точки:'))
long_START = as.numeric(readline('Введите долготу начальной точки:'))
lat_FINISH = as.numeric(readline('Введите широту конечной точки:'))
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
i = 0
while(i < 10) {
i = i+1
print(i)
}
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
#Cities  #пробный вывод фреймов
#Sections
Cities$Distance_source[1]
#Cities  #пробный вывод фреймов
#Sections
Cities$Distance_source[68]
#Cities  #пробный вывод фреймов
#Sections
Cities$Distance_source[6]
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#lat_START = lat_START * pi
phi
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и не пересекает 180-й меридиан."
}
} else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и не пересекает 180-й меридиан."
}
Answer
print(paste("Длина полета составила", S, "км, время в пути ~",Time, " часов.", Answer))
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
getwd()
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
library(devtools)
library(desc)
detach("package:desc", unload = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
R.version()
R.Version()
assignInNamespace("version_info", c(devtools:::version_info, list("3.6" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
devtools:::version_info
devtools::version_info
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
> devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
library(devtools)
devtools::install_github("tsamsonov/grwat")
library(devtools)
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
install.packages("devtools")
devtools::install_github("tsamsonov/grwat")
install.packages('tinytex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
df
df = data.frame(obs = rnorm(10),
pred = rnorm(10))
newcol = set.Date(from = as.Date('2020-09-21'), by = '1 day', length.out = 10)
newcol
df = cbind(df, newcol)
df
newrow = c(rnorm(1), rnorm(1), '2020-10-01')
newcow
df = data.frame(obs = rnorm(10),
pred = rnorm(10))
newcol = set.Date(from = as.Date('2020-09-21'), by = '1 day', length.out = 10)
newcol
df = cbind(df, newcol)
df
newrow = c(rnorm(1), rnorm(1), '2020-10-01')
newcow
newrow
xls_files
# df = data.frame(obs = rnorm(10),
#                 pred = rnorm(10))
#
# newcol = set.Date(from = as.Date('2020-09-21'), by = '1 day', length.out = 10)
# newcol
#
# df = cbind(df, newcol)
# df
# newrow = c(rnorm(1), rnorm(1), '2020-10-01')
# newrow
#
# newrow = list(rnorm(1), rnorm(1), '2020-10-01')
setwd('C:/Users/gorba/DataSciense/R_geographic/R_HydroPredictions/байкал')
xls_files = list.files(pattern = '.xls')
xls_files
library(readxl)
prog = read_xls()
xls_files
library(readxl)
setwd('C:/Users/gorba/DataSciense/R_geographic/R_HydroPredictions/байкал')
xls_files = list.files(pattern = '.xls')
xls_files
library(readxl)
prog_agr = read_xls(xls_files[7], skip = 10,
col_names = c('year', 'pred', 'obs'),
col_types = c('numeric', 'numeric', 'skip', 'numeric'))
View(prog_agr)
print(x)
for (x in xls_files)
print(x)
print(dim(df))
for (x in xls_files){
print(x)
df = read_xls(x, skip = 10,
col_names = c('year', 'pred', 'obs'),
col_types = c('numeric', 'numeric', 'skip', 'numeric'))
print(dim(df))
prog_df = rbind(prog_df, df)
}
prog_df = data.frame()
for (x in xls_files){
print(x)
df = read_xls(x, skip = 10,
col_names = c('year', 'pred', 'obs'),
col_types = c('numeric', 'numeric', 'skip', 'numeric'))
print(dim(df))
prog_df = rbind(prog_df, df)
}
month.abb
month.abb[c(1, 10:12, 2:9)]
# df = data.frame(obs = rnorm(10),
#                 pred = rnorm(10))
#
# newcol = set.Date(from = as.Date('2020-09-21'), by = '1 day', length.out = 10)
# newcol
#
# df = cbind(df, newcol)
# df
# newrow = c(rnorm(1), rnorm(1), '2020-10-01')
# newrow
#
# newrow = list(rnorm(1), rnorm(1), '2020-10-01')
setwd('C:/Users/gorba/DataSciense/R_geographic/R_HydroPredictions/байкал')
xls_files = list.files(pattern = '.xls')
xls_files
library(readxl)
prog_agr = read_xls(xls_files[7], skip = 10,
col_names = c('year', 'pred', 'obs'),
col_types = c('numeric', 'numeric', 'skip', 'numeric'))
prog_df = data.frame()
for (x in xls_files){
print(x)
df = read_xls(x, skip = 10,
col_names = c('year', 'pred', 'obs'),
col_types = c('numeric', 'numeric', 'skip', 'numeric'))
print(dim(df))
prog_df = rbind(prog_df, df)
}
prog_df$month = rep(month.abb[c(1, 10:12, 2:9)], each = 54)
View(prog_df)
read_prog = function(x){
df = read_xls(x, skip = 10,
col_names = c('year', 'pred', 'obs'),
col_types = c('numeric', 'numeric', 'skip', 'numeric'))
}
prog_list = lapply(xls_files, read_prog)
View(prog_list)
prog_lis_df = do.call[what = rbind, arg = prog_list]
read_prog = function(x){
df = read_xls(x, skip = 10,
col_names = c('year', 'pred', 'obs'),
col_types = c('numeric', 'numeric', 'skip', 'numeric'))
}
prog_list = lapply(xls_files, read_prog)
prog_lis_df = do.call[what = rbind, arg = prog_list]
prog_lis_df = do.call(what = rbind, arg = prog_list)
View(prog_lis_df)
summary(prog_df)
library(ggplot2)
ggplot(prod_df, aes(x = year, col = month)) +
geom_line(aes(y = obs, col ='Наблюдения'),  size = 2) +
geom_line(aes(y = pred, col = 'Прогноз'), linetype = 'dashed') +
facet_wrap(.-month, scales = 'free_y') +
labs(x = 'Год', y = expression('Приток'), col = 'Приток')
library(ggplot2)
ggplot(prog_df, aes(x = year, col = month)) +
geom_line(aes(y = obs, col ='Наблюдения'),  size = 2) +
geom_line(aes(y = pred, col = 'Прогноз'), linetype = 'dashed') +
facet_wrap(.-month, scales = 'free_y') +
labs(x = 'Год', y = expression('Приток'), col = 'Приток')
library(ggplot2)
ggplot(prog_df, aes(x = year, col = month)) +
geom_line(aes(y = obs, col ='Наблюдения'),  size = 2) +
geom_line(aes(y = pred, col = 'Прогноз'), linetype = 'dashed') +
facet_wrap(.~month, scales = 'free_y') +
labs(x = 'Год', y = expression('Приток'), col = 'Приток')
library(ggplot2)
ggplot(prog_df, aes(x = year, col = month)) +
geom_line(aes(y = obs, col ='Наблюдения'),  size = 2) +
geom_line(aes(y = pred, col = 'Прогноз'), linetype = 'dashed') +
facet_wrap(.~month, scales = 'free_y') +
labs(x = 'Год', y = expression('Приток'), col = 'Приток')
ggplot(prog_df ,aes(x = obs, y = pred, col = month)) + geom_point(size = 3) +
gom_smooth(method = 'lm', formula = y ~ x, show.legend = F) +
geom_ablime() + xlim(-1000, 10000) + ylim(-1000, 10000)
View(prog_df)
cor_coef = as.character(round(cor(prog_df$pred, df$obs), 2))
cor_coef = as.character(round(cor(prog_df$pred, prog_df$obs), 2))
View(prog_df)
View(prog_df)
cor(na.omit(prog_df[,2:3]))
ggplot(prog_df ,aes(x = obs, y = pred, col = month)) + geom_point(size = 3) +
gom_smooth(method = 'lm', formula = y ~ x, show.legend = F) +
geom_ablime() + xlim(-1000, 10000) + ylim(-1000, 10000)
ggplot(prog_df ,aes(x = obs, y = pred, col = month)) + geom_point(size = 3) +
geom_smooth(method = 'lm', formula = y ~ x, show.legend = F) +
geom_ablime() + xlim(-1000, 10000) + ylim(-1000, 10000)
ggplot(prog_df ,aes(x = obs, y = pred, col = month)) + geom_point(size = 3) +
geom_smooth(method = 'lm', formula = y ~ x, show.legend = F) +
geom_abline() + xlim(-1000, 10000) + ylim(-1000, 10000)
ggplot(prog_df ,aes(x = obs, y = pred, col = month)) + geom_point(size = 3) +
geom_smooth(method = 'lm', formula = y ~ x, show.legend = F) +
geom_abline() + xlim(-1000, 10000) + ylim(-1000, 10000) + facet_wrap(.~month)
ggplot(prog_df ,aes(x = obs, y = pred, col = month)) + geom_point(size = 3) +
geom_smooth(method = 'lm', formula = y ~ x, show.legend = F) +
geom_abline() + facet_wrap(.~month, scales = 'free')
cor(na.omit([]))
15 %% 3
2^0
20,5 %/% 10
20.5 %/% 10
A ?? 2
A %% 2
10 %%2
10 %/% 2
sqrt(-sin(5))
as.Date('2015/09/15') - 5
?which
j = 1 for (i in -3:3) { j = j * i } print(j)
j = 1 for (i in -3:3) { j = j * i } print(j)
for (i in -3:3) { j = j * i } print(j)
j = 1
for (i in -3:3) { j = j * i }
print(j)
for (i in -3:3) { j = j * i, print(1)}
for (i in -3:3) { j = j * i,
print(1)}
library(RColorBrewer) # Откроем библиотеку RColorBrewer:
display.brewer.all()
