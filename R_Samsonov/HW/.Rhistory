lat = readline('Введите широту точки:')
lat
long  = readline('Введите долготу точки:')
long
lat long
lat
log
long
demo()
a= 3
a
a=
lat1
a = 3
a
lat1= readline('qqq')
lat = readline('Введите широту точки:')
long_2 = readline('Введите долготу конечной точки:')
long_1 = readline('Введите долготу начальной точки:')
lat_2 = readline('Введите широту конечной точки:')
lat_1 = readline('Введите широту начальной точки:')
long_1 = readline('Введите долготу начальной точки:')
lat_2 = readline('Введите широту конечной точки:')
long_1 = readline('Введите долготу начальной точки:')
lat_2 = readline('Введите широту конечной точки:')
lat_1 = readline('Введите широту начальной точки:')
long_1 = readline('Введите долготу начальной точки:')
lat_2 = readline('Введите широту конечной точки:')
long_2 = readline('Введите долготу конечной точки:')
D = arccos(sin(lat_1) * sin(lat_2) + cos(lat_1) * cos(lat_2) * cos( long_1 - long_2 ))
D = arccos((sin(lat_1) * sin(lat_2) + cos(lat_1) * cos(lat_2) * cos( long_1 - long_2 )))
D = acos((sin(lat_1) * sin(lat_2) + cos(lat_1) * cos(lat_2) * cos( long_1 - long_2 )))
D = acos(sin(lat_1) * sin(lat_2) + cos(lat_1) * cos(lat_2) * cos( long_1 - long_2 ))
a = 3
readline('Введите широту начальной точки:')
long_1 = readline('Введите долготу начальной точки:')
print('Введите широту начальной точки:'),
#long_1 = readline('Введите долготу начальной точки:')
lat_2 = readline('Введите широту конечной точки:')
lat_2 = readline('Введите широту конечной точки:')
print('true')
b = 6
print('true')
a = 2
a = 2
b = 6
if (a > b) {
print('true')
}
if (a < 0) {
cat('Получилось отрицательное число!')
} else if (a > 0) {
cat('Получилось положительное число!')
} else {
cat('Получился нуль!')
}
a = round(rnorm(1), 1)
if (a < 0) {
cat('Получилось отрицательное число!')
} else if (a > 0) {
cat('Получилось положительное число!')
} else {
cat('Получился нуль!')
}
a = round(rnorm(1), 1)
if (a < 0) {
cat('Получилось отрицательное число!')
} else if (a > 0) {
cat('Получилось положительное число!')
} else {
cat('Получился нуль!')
}
a = round(rnorm(1), 1)
a
if (a < 0) {
cat('Получилось отрицательное число!')
} else if (a > 0) {
cat('Получилось положительное число!')
} else {
cat('Получился нуль!')
}
a = round(rnorm(1), 1)
a
if (a < 0) {
cat('Получилось отрицательное число!')
} else if (a > 0) {
cat('Получилось положительное число!')
} else {
cat('Получился нуль!')
}
Zone = c('СЃС‚РµРїСЊ',
'РЅРёР·РєРѕРіРѕСЂРЅС‹Рµ С€РёСЂРѕРєРѕР»РёСЃС‚РІРµРЅРЅС‹Рµ Р»РµСЃР° (РґСѓР±, РіСЂР°Р±)',
'СЃСЂРµРґРЅРµРіРѕСЂРЅС‹Рµ С€РёСЂРѕРєРѕР»РёСЃС‚РІРµРЅРЅС‹Рµ Р»РµСЃР° (Р±СѓРє)',
'СЃРјРµС€Р°РЅРЅС‹Рµ Р»РµСЃР° (РµР»СЊ, РїРёС…С‚Р°, Р±СѓРє)',
'РєСЂРёРІРѕР»РµСЃРёСЏ (Р±РµСЂРµР·Р°, Р±СѓРє, РєР»С‘РЅ)',
'СЃСѓР±Р°Р»СЊРїРёР№СЃРєРёРµ Рё Р°Р»СЊРїРёР№СЃРєРёРµ Р»СѓРіР°',
'СЃСѓР±РЅРёРІР°Р»СЊРЅР°СЏ Р·РѕРЅР° (С„СЂР°РіРјРµРЅС‚Р°СЂРЅР°СЏ СЂР°СЃС‚РёС‚РµР»СЊРЅРѕСЃС‚СЊ)',
'РіР»СЏС†РёР°Р»СЊРЅРѕ-РЅРёРІР°Р»СЊРЅР°СЏ Р·РѕРЅР°')
zones = data.frame(Hmin = c(400, Hmax[-length(Hmax)]),
Hmax,
Zone)
H = as.numeric(readline('Р’РІРµРґРёС‚Рµ РІС‹СЃРѕС‚Сѓ: '))
cat("Длина введенной строки равняется ", nchar(s), "символам")
s = readline('Р’РІРµРґРёС‚Рµ СЃС‚СЂРѕРєСѓ: ')
s = readline('Р’РІРµРґРёС‚Рµ СЃС‚СЂРѕРєСѓ: ')
cat("Длина введенной строки равняется ", nchar(s), "символам")
lat_1 = readline('Введите широту начальной точки:')
long_1 = readline('Введите долготу начальной точки:')
23
lat_2 = readline('Введите широту конечной точки:')
34234
lat_11 = as(lat_1, "integer")
class(lat_11)
lat_11 = as(lat_1, "numeric")
class(lat_11)
lat_ST = as.numeric(readline('Введите широту вашей точки:'))
lat_ST = as.numeric(readline('Введите широту вашей точки:'))
lat_START = as.numeric(readline('Введите широту начальной точки:'))
long_START = as.numeric(readline('Введите долготу начальной точки:'))
lat_FINISH = as.numeric(readline('Введите широту конечной точки:'))
long_FINISH = as.numeric(readline('Введите долготу начальной точки:'))
D = acos(sin(lat_START) * sin(lat_FINISH) + cos(lat_START) * cos(lat_FINISH) * cos( long_START - long_FINISH ))
S = D * 6371
D = acos(sin(lat_START) * sin(lat_FINISH) + cos(lat_START) * cos(lat_FINISH) * cos( long_START - long_FINISH ))
S = D * 6371
T = S / 850
if (long_START < 0) and (long_FINISH < 0) {
CrossMer = TRUE
#} else if (long_FINISH < 0) {
#  crossMer = TRUE
}
if (long_START < 0)  {
CrossMer = TRUE
#} else if (long_FINISH < 0) {
#  crossMer = TRUE
}
CrossMer
if (long_START > 0)  {
CrossMer = TRUE
#} else if (long_FINISH < 0) {
#  crossMer = TRUE
}
CrossMer
if (long_START > 0)  {
CrossMer = Teeee
} else {
CrossMer = fuuuuu
}
if (long_START > 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
CrossMer
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
CrossMer
S = D * 6371
T = S / 850
round(S, 3)
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
round(S, 0)
S = round(S, 0)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
T = round(T, 1)
T = round(T, 2)
T = round(T, 2)
T = round(T, 100)
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
S = D * 6371
T = S / 850
S = round(S, 0)
T = round(T, 100)
T = round(T, 1)
T = round(T, 10)
T = round(T, 10)
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
T = S / 850
S = round(S, 0)
T = round(T, 10)
T = S / 850
S = round(S, 0)
T = round(T, 2)
if (long_START < 0)  {
CrossMer = 1
} else {
CrossMer = 0
}
CrossMer
if (long_START < 0) & (long_FINISH < 0 ) {
CrossMer = 1
} else {
CrossMer = 0
}
Answer
T = round(T, 2) # с округлением до 0.5 пока не справился
if (long_START < 0 | long_FINISH < 0) {
if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
}
} else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и не пересекает 180-й меридиан."
}
Answer
lat_START = as.numeric(readline('Введите широту начальной точки:'))
long_START = as.numeric(readline('Введите долготу начальной точки:'))
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0){
} else if (long_START < 0 | long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
}
Answer
Answer
if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0)  {
} else if (long_START < 0 | long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
}
Answer
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
lat_START = as.numeric(readline('Введите широту начальной точки:'))
20
lat_START = as.numeric(readline('Введите широту начальной точки:'))
long_START = as.numeric(readline('Введите долготу начальной точки:'))
lat_FINISH = as.numeric(readline('Введите широту конечной точки:'))
long_FINISH = as.numeric(readline('Введите долготу конечной точки:'))
D = acos(sin(lat_START) * sin(lat_FINISH) + cos(lat_START) * cos(lat_FINISH) * cos( long_START - long_FINISH ))
S = D * 6371
T = S / 850
S = round(S, 0)
T = round(T, 2) # с округлением до 0.5 пока не справился
#  if (long_START < 0 | long_FINISH < 0) {
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#   } else {
#    Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#   } else {
#    Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
# }
#  } else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
#  if (long_START < 0 | long_FINISH < 0) {
#     if (360 - (abs(long_START) + abs(long_FINISH)) < (abs(long_FINISH) + abs(long_FINISH)) ) {
#    Answer = "Маршрут полета не пересекает нулевой меридиан и пересекает 180-й меридиан."
#   } else {
#    Answer = "Маршрут полета  пересекает нулевой меридиан и   не пересекает 180-й меридиан."
# }
#  } else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
#   Answer = "Маршрут полета не пересекает нулевой меридиан и не пересекает 180-й меридиан."
#  }
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW_1.R', echo=TRUE)
lat_START = as.numeric(readline('Введите широту начальной точки:'))
long_START = as.numeric(readline('Введите долготу начальной точки:'))
lat_FINISH = as.numeric(readline('Введите широту конечной точки:'))
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
i = 0
while(i < 10) {
i = i+1
print(i)
}
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
#Cities  #пробный вывод фреймов
#Sections
Cities$Distance_source[1]
#Cities  #пробный вывод фреймов
#Sections
Cities$Distance_source[68]
#Cities  #пробный вывод фреймов
#Sections
Cities$Distance_source[6]
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#lat_START = lat_START * pi
phi
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
} else {
Answer = "Маршрут полета  пересекает нулевой меридиан и не пересекает 180-й меридиан."
}
} else if (long_START > 0 & long_FINISH > 0 | long_START < 0 & long_FINISH < 0) {
Answer = "Маршрут полета не пересекает нулевой меридиан и не пересекает 180-й меридиан."
}
Answer
print(paste("Длина полета составила", S, "км, время в пути ~",Time, " часов.", Answer))
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/1_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
getwd()
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
library(devtools)
library(desc)
detach("package:desc", unload = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
R.version()
R.Version()
assignInNamespace("version_info", c(devtools:::version_info, list("3.6" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
devtools:::version_info
devtools::version_info
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
> devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
library(devtools)
devtools::install_github("tsamsonov/grwat")
library(devtools)
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
install.packages("devtools")
devtools::install_github("tsamsonov/grwat")
install.packages('tinytex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
getwd()
getwd()
library(readxl)
library(tidyverse)
library(writexl)
setwd('C:/Users/gorba/DataSciense/R_geographic/R_Samsonov/HW')
getwd()
soil_data = read_excel('soil_data.xls', 1,  # чтение фаила
col_types = c(rep('numeric', 2), rep('text', 240)))
View(soil_data)
description = read_excel('soil_data.xls',2 , col_names = c('name', 'desc'),
col_types = c(rep('text', 2)))
View(description)
View(description)
