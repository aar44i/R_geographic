source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
getwd()
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'UTF-8', echo=TRUE)
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
library(devtools)
library(desc)
detach("package:desc", unload = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
R.version()
R.Version()
assignInNamespace("version_info", c(devtools:::version_info, list("3.6" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
devtools:::version_info
devtools::version_info
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
> devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
devtools::install_github("tsamsonov/grwat")
library(devtools)
devtools::install_github("tsamsonov/grwat")
library(devtools)
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
tinytex:::is_tinytex()
install.packages("devtools")
devtools::install_github("tsamsonov/grwat")
install.packages('tinytex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
getwd()
getwd()
library(readxl)
library(tidyverse)
library(writexl)
setwd('C:/Users/gorba/DataSciense/R_geographic/R_Samsonov/HW')
getwd()
soil_data = read_excel('soil_data.xls', 1,  # чтение фаила
col_types = c(rep('numeric', 2), rep('text', 240)))
View(soil_data)
description = read_excel('soil_data.xls',2 , col_names = c('name', 'desc'),
col_types = c(rep('text', 2)))
View(description)
View(description)
number = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
latitude = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
longitude = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
distance_source = c(111, 391, 522,  645, 801, 1285, 1500)
distance_mouth = c(1389, 1109, 978, 855, 699, 215, 0)
zero_hydropost = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
number = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
latitude = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
longitude = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
distance_source = c(111, 391, 522,  645, 801, 1285, 1500)
distance_mouth = c(1389, 1109, 978, 855, 699, 215, 0)
zero_hydropost = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(Number = number, Towns = towns, Latitude = latitude, Longitude = longitude,
Distance_source = distance_source, Distance_mouth = distance_mouth,
Zero_hydropost = zero_hydropost) # первый фрейм
D = acos(sin(latitude[1:6]) * sin(latitude[2:7]) + cos(latitude[1:6]) * cos(latitude[2:7])
* cos( longitude[1:6] - longitude[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = distance_source [2:7] - distance_source [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(FirstCity = number[1:6], SecondCity =  number[2:7],
Distanse = distanse,
Hight = zero_hydropost[1:6] - zero_hydropost[2:7],
Tortusity = tortusity) #второй фрейм
View(Sections)
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(Number = num, Towns = towns, Latitude = lat, Longitude = long,
Distance_source = distance_s, Distance_mouth = dist_m,
Zero_hydropost = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = number[1:6], second_city =  number[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
#Cities  #пробный вывод фреймов
#Sections
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
}
}
#UserDistance
BackwardCity = Cities$Towns[i - 1] # Город который уже проплыл
ForwardCity = Cities$Towns[i] # Город до которого еще не доплыл
Persent = 100 * UserDistance / 1389 # процент пройденного пути
Persent = round(Persent, 0)
CurrentHigh = Cities$Zero_hydropost[i - 1]  - (UserDistance - (1389 - Cities$Distance_mouth[i - 1])) *
(Cities$Zero_hydropost[i - 1] - Cities$Zero_hydropost[i]) /
abs(Cities$Distance_mouth[i] - Cities$Distance_mouth[i - 1]) # точное значение абс. высоты в точке
CurrentHigh = round(CurrentHigh, 1) #округление
print(paste(sep = "", "Вы находитесь между городами ",BackwardCity," и ",ForwardCity,", пройдено ",Persent,"% маршрута, ваша высота примерно ",CurrentHigh,"м."))
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(Number = num, Towns = towns, Latitude = lat, Longitude = long,
Distance_source = distance_s, Distance_mouth = dist_m,
Zero_hydropost = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = number[1:6], second_city =  number[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
#Cities  #пробный вывод фреймов
#Sections
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
}
}
#UserDistance
bcity = Cities$towns[i - 1] # Город который уже проплыл
fcity = Cities$towns[i] # Город до которого еще не доплыл
prsnt = 100 * user_dist / 1389 # процент пройденного пути
prsnt = round(prsnt, 0)
current_h = Cities$zero_h[i - 1]  - (user_dist - (1389 - Cities$dist_m[i - 1])) *
(Cities$zero_h[i - 1] - Cities$zero_h[i]) /
abs(Cities$dist_m[i] - Cities$dist_m[i - 1]) # точное значение абс. высоты в точке
current_h = round(current_h, 1) #округление
print(paste(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",CurrentHigh,"м."))
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(Number = num, Towns = towns, Latitude = lat, Longitude = long,
Distance_source = distance_s, Distance_mouth = dist_m,
Zero_hydropost = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = number[1:6], second_city =  number[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
#Cities  #пробный вывод фреймов
#Sections
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
}
}
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
print(i)
}
}
View(Cities)
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
distance_s = distance_s, dist_m = dist_m,
zero_h = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = number[1:6], second_city =  number[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
#Cities  #пробный вывод фреймов
#Sections
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
print(i)
}
}
View(Cities)
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
distance_s = distance_s, dist_m = dist_m,
zero_h = zero_h) # первый фрейм
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
dist_s = dist_s, dist_m = dist_m,
zero_h = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = number[1:6], second_city =  number[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
print(i)
}
}
#UserDistance
bcity = Cities$towns[i - 1] # Город который уже проплыл
fcity = Cities$towns[i] # Город до которого еще не доплыл
prsnt = 100 * user_dist / 1389 # процент пройденного пути
prsnt = round(prsnt, 0)
current_h = Cities$zero_h[i - 1]  - (user_dist - (1389 - Cities$dist_m[i - 1])) *
(Cities$zero_h[i - 1] - Cities$zero_h[i]) /
abs(Cities$dist_m[i] - Cities$dist_m[i - 1]) # точное значение абс. высоты в точке
current_h = round(current_h, 1) #округление
print(paste(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",CurrentHigh,"м."))
print(paste(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",current_h,"м."))
cat(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",current_h,"м."))
cat(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",current_h,"м.")
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
dist_s = dist_s, dist_m = dist_m,
zero_h = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = number[1:6], second_city =  number[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
#Cities  #пробный вывод фреймов
#Sections
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
}
}
#UserDistance
bcity = Cities$towns[i - 1] # Город который уже проплыл
fcity = Cities$towns[i] # Город до которого еще не доплыл
prsnt = 100 * user_dist / 1389 # процент пройденного пути
prsnt = round(prsnt, 0)
current_h = Cities$zero_h[i - 1]  - (user_dist - (1389 - Cities$dist_m[i - 1])) *
(Cities$zero_h[i - 1] - Cities$zero_h[i]) /
abs(Cities$dist_m[i] - Cities$dist_m[i - 1]) # точное значение абс. высоты в точке
current_h = round(current_h, 1) #округление
cat(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",current_h,"м.")
library(tidyverse)
library(googlesheets4)
library(lubridate)
meteo_data <- lapply(as.character(catalog$ID), function(X) read_sheet('1FWC_YBrlINnjR5POC2kxa_LnLC7n5fFA90oNA7dLTP0', sheet = X, col_types = 'ccncccnninncnnnnncc')) %>%
set_names(catalog$ID) %>%
bind_rows(.id = 'id') %>%
mutate(id = as.numeric(id)) %>%
full_join(catalog, by = c('id' = 'ID')) %>%
mutate(Datetime = as.POSIXct(Datetime)) %>%
relocate(id, .before = NAME) %>%
set_names(c('Datetime', 'Wdir', 'Wspd', 'Vis', 'Phen', 'Cloud', 'T', 'Td', 'F', 'Te', 'Tes', 'Comf', 'P', "Po", 'Tmin', 'Tmax', 'R', 'R24', 'S', 'ID', 'NAME', 'LON', 'LAT', 'H'))
catalog <- read_sheet('1Q6HCY4jxiYefjPdWrN5erwgEee-Gz_BywqZW2mQcftw')
meteo_data <- lapply(as.character(catalog$ID), function(X) read_sheet('1FWC_YBrlINnjR5POC2kxa_LnLC7n5fFA90oNA7dLTP0', sheet = X, col_types = 'ccncccnninncnnnnncc')) %>%
set_names(catalog$ID) %>%
bind_rows(.id = 'id') %>%
mutate(id = as.numeric(id)) %>%
full_join(catalog, by = c('id' = 'ID')) %>%
mutate(Datetime = as.POSIXct(Datetime)) %>%
relocate(id, .before = NAME) %>%
set_names(c('Datetime', 'Wdir', 'Wspd', 'Vis', 'Phen', 'Cloud', 'T', 'Td', 'F', 'Te', 'Tes', 'Comf', 'P', "Po", 'Tmin', 'Tmax', 'R', 'R24', 'S', 'ID', 'NAME', 'LON', 'LAT', 'H'))
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
dist_s = dist_s, dist_m = dist_m,
zero_h = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = number[1:6], second_city =  number[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
dist_s = dist_s, dist_m = dist_m,
zero_h = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = num[1:6], second_city =  num[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
}
}
#UserDistance
bcity = Cities$towns[i - 1] # Город который уже проплыл
fcity = Cities$towns[i] # Город до которого еще не доплыл
prsnt = 100 * user_dist / 1389 # процент пройденного пути
prsnt = round(prsnt, 0)
current_h = Cities$zero_h[i - 1]  - (user_dist - (1389 - Cities$dist_m[i - 1])) *
(Cities$zero_h[i - 1] - Cities$zero_h[i]) /
abs(Cities$dist_m[i] - Cities$dist_m[i - 1]) # точное значение абс. высоты в точке
current_h = round(current_h, 1) #округление
cat(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",current_h,"м.")
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "Орёл", "Калуга", "Серпухов", "Коломна", "Рязань", "Муром", "Нижний Новгород")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
dist_s = dist_s, dist_m = dist_m,
zero_h = zero_h) # первый фрейм
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # расстояние между городами по ортодромии
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #расстояние между городами по реке
tortusity = S / distanse #извилистость
Sections = data.frame(first_city = num[1:6], second_city =  num[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #второй фрейм
#Cities  #пробный вывод фреймов
#Sections
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
if ( user_dist > 1389){
print('Данная точка находится за пределами обследуемой территории, попробуйте заново')
user_dist = as.numeric(readline('Введите расстояние от начала маршрута (в км):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
}
}
#UserDistance
bcity = Cities$towns[i - 1] # Город который уже проплыл
fcity = Cities$towns[i] # Город до которого еще не доплыл
prsnt = 100 * user_dist / 1389 # процент пройденного пути
prsnt = round(prsnt, 0)
current_h = Cities$zero_h[i - 1]  - (user_dist - (1389 - Cities$dist_m[i - 1])) *
(Cities$zero_h[i - 1] - Cities$zero_h[i]) /
abs(Cities$dist_m[i] - Cities$dist_m[i - 1]) # точное значение абс. высоты в точке
current_h = round(current_h, 1) #округление
cat(sep = "", "Вы находитесь между городами ",bcity," и ",fcity,", пройдено ",prsnt,"% маршрута, ваша высота примерно ",current_h,"м.")
num = c(1, 2, 3, 4, 5, 6, 7)
towns = c( "????", "??????", "????????", "???????", "??????", "?????", "?????? ????????")
lat = c(52.938023, 54.505862,  54.883524, 55.070474, 54.651824, 55.576834, 56.210471)
long = c(36.065684, 36.233586, 37.418129,38.830827, 39.806943, 42.072086, 43.872036)
dist_s = c(111, 391, 522,  645, 801, 1285, 1500)
dist_m = c(1389, 1109, 978, 855, 699, 215, 0)
zero_h = c(146.31, 116.72, 107.54, 100.26, 93.41, 73.27, 62.00)
Cities = data.frame(num = num, towns = towns, lat = lat, long = long,
dist_s = dist_s, dist_m = dist_m,
zero_h = zero_h) # ?????? ?????
D = acos(sin(lat[1:6]) * sin(lat[2:7]) + cos(lat[1:6]) * cos(lat[2:7])
* cos( long[1:6] - long[2:7])) # ?????????? ????? ???????? ?? ??????????
S = D * 111.1
distanse = dist_s [2:7] - dist_s [1:6] #?????????? ????? ???????? ?? ????
tortusity = S / distanse #????????????
Sections = data.frame(first_city = num[1:6], second_city =  num[2:7],
Distanse = distanse,
Hight = zero_h[1:6] - zero_h[2:7],
Tortusity = tortusity) #?????? ?????
#Cities  #??????? ????? ???????
#Sections
user_dist = as.numeric(readline('??????? ?????????? ?? ?????? ???????? (? ??):'))
if ( user_dist > 1389){
print('?????? ????? ????????? ?? ????????? ??????????? ??????????, ?????????? ??????')
user_dist = as.numeric(readline('??????? ?????????? ?? ?????? ???????? (? ??):'))
} else {
i = 1
while (user_dist > 1389 - Cities$dist_m[i]){
i = i + 1
}
}
#UserDistance
bcity = Cities$towns[i - 1] # ????? ??????? ??? ???????
fcity = Cities$towns[i] # ????? ?? ???????? ??? ?? ??????
prsnt = 100 * user_dist / 1389 # ??????? ??????????? ????
prsnt = round(prsnt, 0)
current_h = Cities$zero_h[i - 1]  - (user_dist - (1389 - Cities$dist_m[i - 1])) *
(Cities$zero_h[i - 1] - Cities$zero_h[i]) /
abs(Cities$dist_m[i] - Cities$dist_m[i - 1]) # ?????? ???????? ???. ?????? ? ?????
current_h = round(current_h, 1) #??????????
cat(sep = "", "?? ?????????? ????? ???????? ",bcity," ? ",fcity,", ???????? ",prsnt,"% ????????, ???? ?????? ???????? ",current_h,"?.")
