arrange(desc(Freq)) %>%
head(10)
# Получим границы классов
nclasses <- 4
class.breaks <- classIntervals(roads.poi$Freq,
n = nclasses,
style = "jenks")
# Извлечем граничные интервалы
borders <- class.breaks$brks
# Названия классов — они же толщины линия от 1 до 4
line.widths <- 1:nclasses
# Перекодируем столбец количества присоединенных пунктов в классы
sizes <- cut(roads.poi$Freq,
breaks = borders,
labels = line.widths)
base.colors <- c("mistyrose", "red")
ramp <- colorRampPalette(base.colors)
colors <- findColours(class.breaks, base.colors)
plot(frame)
plot(water %>% st_geometry(),
col = "lightskyblue1",
border = "lightskyblue3",
add = TRUE)
plot(roads %>% st_geometry(),
col = "gray70",
add = TRUE)
plot(roads.poi %>% st_geometry(),
lwd = sizes,
col = colors,
add = TRUE)
plot(poi.food %>% st_geometry(),
col = "deepskyblue4",
pch = 20,
cex = 0.2,
add = TRUE)
# Функция legendGradLines из пакета cartography позволяет строить
# легенду для карт линий градуированных размеров:
legendGradLines(title.txt = "Пункты питания",
pos = "left",
title.cex = 0.8,
values.cex = 0.6,
breaks = borders,
lwd = line.widths,
col = "red")
poi.food <- poi.food %>% mutate(count = 1)
rayons.poi <- aggregate(poi.food['count'], rayons, sum)
# Преобразуем результат в относительный показатель
# (единиц на кв.км. площади) и запишем в таблицу районов:
rayons.poi$density <- 1000000 * rayons.poi$count / st_area(rayons.poi)
# Настроим параметры отображения
choro.pal <- colorRampPalette(c("lightgoldenrodyellow", "orangered"))
# Функция legendGradLines из пакета cartography позволяет строить
# легенду для карт линий градуированных размеров:
legendGradLines(title.txt = "Пункты питания",
pos = "left",
title.cex = 0.8,
values.cex = 0.6,
breaks = borders,
lwd = line.widths,
col = "red")
poi.food <- poi.food %>% mutate(count = 1)
rayons.poi <- aggregate(poi.food['count'], rayons, sum)
# Преобразуем результат в относительный показатель
# (единиц на кв.км. площади) и запишем в таблицу районов:
rayons.poi$density <- 1000000 * rayons.poi$count / st_area(rayons.poi)
# Настроим параметры отображения
choro.pal <- colorRampPalette(c("lightgoldenrodyellow", "orangered"))
intervals <- classIntervals(rayons.poi$density,
n = 5,
style = "quantile")
choroLayer(rayons.poi, # Исходный слой типа SpatialPolygonsDataFrame
var = "density", # Картографируемая переменная (столбец)
breaks = intervals$brks, # Границы интервалов
col = choro.pal(5), # Цвета для соответствующих интервалов
legend.pos = "n") # Легенду мы нарисуем позднее, поверх всех слоев
plot(water %>% st_geometry(),
col = "lightskyblue1",
border = "lightskyblue3",
add = TRUE)
plot(roads %>% st_geometry(),
col = "gray50",
add = TRUE)
plot(poi.food %>% st_geometry(),
col = "deepskyblue4",
pch = 20,
cex = 0.5,
add = TRUE)
plot(rayons %>% st_geometry(),
border = "black",
lwd = 3,
add = TRUE)
text(rayons %>% st_centroid() %>% st_coordinates(),
labels = gsub(' ', '\n', rayons$NAME),
font = 2,
cex = 0.6)
# Рисуем легенду
legendChoro(breaks = intervals$brks,
col = choro.pal(5),
pos = "topleft",
frame = FALSE,
title.txt = "Заведений на 1 кв.км")
# Функция отвечает за рисование базовой карты
plotBasemap <- function(){
plot(frame)
plot(water %>% st_geometry(),
col = "lightskyblue1",
border = "lightskyblue3",
add = TRUE)
plot(roads %>% st_geometry(),
col = "gray70",
add = TRUE)
plot(poi.food %>% st_geometry(),
col = "deepskyblue4",
pch = 20,
cex = 0.3,
add = TRUE)
plot(stations %>% st_geometry(),
col = "slategray4",
pch = 20,
cex = 2,
add = TRUE)
text(stations %>% st_centroid() %>% st_coordinates(),
labels = "M",
col = "white",
cex = 0.4)
}
# Выберем станцию метро и построим буферную зону
krop <- stations %>% filter(NAME == "Кропоткинская")
zone <- st_buffer(krop, dist = 300)
# Применим разработанную функцию для отбора точек
selected.poi <- poi.food[zone, ]
# Применим разработанную функцию для рисования картографической основы
plotBasemap()
# Визуализируем результаты анализа
plot(krop %>% st_geometry(),
col = "red",
pch = 20,
cex = 4,
add = TRUE)
text(krop %>% st_coordinates(),
labels = "M",
col = "white",
cex = 0.7,
add = TRUE)
plot(zone %>% st_geometry(),
col = adjustcolor("sienna3", alpha.f = 0.5),
border = "sienna3",
add = TRUE)
plot(selected.poi %>% st_geometry(),
col = "sienna4",
pch = 20,
cex = 0.5,
add = TRUE)
## # Найденные объекты в табличном представлении:
## View(selected.poi)
river <- water %>% filter(NAME == "Москва")
zone <- st_buffer(krop, dist = 1000)
# Применим разработанную функцию для отбора точек
selected.poi <- poi.food[zone, ]
# Применим разработанную функцию для рисования картографической основы
plotBasemap()
# Визуализируем результаты анализа
plot(krop %>% st_geometry(),
col = "red",
pch = 20,
cex = 4,
add = TRUE)
text(krop %>% st_coordinates(),
labels = "M",
col = "white",
cex = 0.7,
add = TRUE)
plot(zone %>% st_geometry(),
col = adjustcolor("sienna3", alpha.f = 0.5),
border = "sienna3",
add = TRUE)
# Выберем станцию метро и построим буферную зону
krop <- stations %>% filter(NAME == "Тверская")
zone <- st_buffer(krop, dist = 1000)
# Применим разработанную функцию для отбора точек
selected.poi <- poi.food[zone, ]
# Применим разработанную функцию для рисования картографической основы
plotBasemap()
# Визуализируем результаты анализа
plot(krop %>% st_geometry(),
col = "red",
pch = 20,
cex = 4,
add = TRUE)
text(krop %>% st_coordinates(),
labels = "M",
col = "white",
cex = 0.7,
add = TRUE)
plot(zone %>% st_geometry(),
col = adjustcolor("sienna3", alpha.f = 0.5),
border = "sienna3",
add = TRUE)
plot(selected.poi %>% st_geometry(),
col = "sienna4",
pch = 20,
cex = 0.5,
add = TRUE)
## # Найденные объекты в табличном представлении:
## View(selected.poi)
river <- water %>% filter(NAME == "Москва")
zone <- st_buffer(river, dist = 100)
selected.poi <- poi.food[zone, ]
plotBasemap()
plot(zone %>% st_geometry(),
col = adjustcolor("orange", alpha.f = 0.5),
border = "orange",
add = TRUE)
plot(river %>% st_geometry(),
col = adjustcolor("deepskyblue", alpha.f = 0.5),
border = F,
add = TRUE)
plot(selected.poi %>% st_geometry(),
col = "firebrick1",
pch = 20,
cex = 0.5,
add = TRUE)
zone <- st_buffer(river, dist = 300)
selected.poi <- poi.food[zone, ]
plotBasemap()
plot(zone %>% st_geometry(),
col = adjustcolor("orange", alpha.f = 0.5),
border = "orange",
add = TRUE)
plot(river %>% st_geometry(),
col = adjustcolor("deepskyblue", alpha.f = 0.5),
border = F,
add = TRUE)
plot(selected.poi %>% st_geometry(),
col = "firebrick1",
pch = 20,
cex = 0.5,
add = TRUE)
# Инициализируем систему координат WGS84, используемую в OSRM
WGS84 <- st_crs(4326)
## # Найденные объекты в табличном представлении:
## View(selected.poi)
river <- water %>% filter(NAME == "Москва")
zone <- st_buffer(river, dist = 300)
selected.poi <- poi.food[zone, ]
plotBasemap()
plot(zone %>% st_geometry(),
col = adjustcolor("orange", alpha.f = 0.5),
border = "orange",
add = TRUE)
plot(river %>% st_geometry(),
col = adjustcolor("deepskyblue", alpha.f = 0.5),
border = F,
add = TRUE)
plot(selected.poi %>% st_geometry(),
col = "firebrick1",
pch = 20,
cex = 0.5,
add = TRUE)
# Инициализируем систему координат WGS84, используемую в OSRM
WGS84 <- st_crs(4326)
# Извлечем информацию о системе координат исходных точек
UTM <- st_crs(poi)
# Выберем целевой объект
psel <- poi %>% filter(NAME == "Центральный детский магазин" & SHOP == "toys")
# Преобразуем координаты точки в WGS84
psel.wgs <- st_transform(psel, WGS84)
# Получаем 5-минутную зону транспортной доступности
# с помощью пакета osrm
service.area <- osrmIsochrone(psel.wgs %>% st_coordinates() %>% as.vector(), breaks = 5)
# Преобразуем зону обратно в UTM для дальнейших операций
service.area.utm <- st_transform(st_as_sf(service.area), UTM)
# Отбираем точки
selected.poi <- poi.food[service.area.utm, ]
# Визуализируем результат
plotBasemap()
plot(service.area.utm %>% st_geometry(),
col = adjustcolor("violetred3", alpha.f = 0.2),
border = "violetred3",
add = TRUE)
plot(selected.poi  %>% st_geometry(),
col = "violetred3",
pch = 20,
cex = 0.5,
add = TRUE)
plot(psel %>% st_geometry(),
col = "violetred4",
pch = 20,
cex = 4,
add = TRUE)
# Выбираем и проецируем начальную точку
origin <- poi %>% filter(NAME == 'Молодая Гвардия')
origin.wgs <- st_transform(origin, WGS84)
# Выбираем и проецируем конечную точку
destination <- poi %>% filter(NAME == 'Чебуречная "Дружба"')
destination.wgs <- st_transform(destination, WGS84)
# Строим маршрут
route <- osrmRoute(origin.wgs %>% as('Spatial'),
destination.wgs %>% as('Spatial'),
overview = "full", # запретить генерализацию линий
sp = TRUE) # вернуть результат в виде объекта класса Spatial
# Преобразуем результат обратно в UTM
route.utm <- st_transform(route %>% st_as_sf(), UTM)
# Визуализируем результат:
plotBasemap()
plot(route.utm %>% st_geometry(),
lwd = 3,
col = "orange",
add = TRUE)
plot(origin %>% st_geometry(),
col = "tomato3",
pch = 20,
cex = 3,
add = TRUE)
# Выберем целевой объект
View(poi)
psel <- poi %>% filter(NAME == "Библиотека им. Гоголя" & AMENITY == "library")
# Преобразуем координаты точки в WGS84
psel.wgs <- st_transform(psel, WGS84)
# Получаем 5-минутную зону транспортной доступности
# с помощью пакета osrm
service.area <- osrmIsochrone(psel.wgs %>% st_coordinates() %>% as.vector(), breaks = 5)
# Преобразуем зону обратно в UTM для дальнейших операций
service.area.utm <- st_transform(st_as_sf(service.area), UTM)
# Отбираем точки
selected.poi <- poi.food[service.area.utm, ]
# Визуализируем результат
plotBasemap()
# Преобразуем координаты точки в WGS84
psel.wgs <- st_transform(psel, WGS84)
# Получаем 5-минутную зону транспортной доступности
# с помощью пакета osrm
service.area <- osrmIsochrone(psel.wgs %>% st_coordinates() %>% as.vector(), breaks = 5)
library(sf)
library(dplyr)
library(classInt)
library(osrm) # Использование онлайн-сервиса маршрутизации OSRM
install.packages("osrm")
library(cartography) # Удобное построение тематических карт средствами plot()
psel <- poi %>% filter(NAME == "Библиотека им. Гоголя" & AMENITY == "library")
# Преобразуем координаты точки в WGS84
psel.wgs <- st_transform(psel, WGS84)
# Получаем 5-минутную зону транспортной доступности
# с помощью пакета osrm
service.area <- osrmIsochrone(psel.wgs %>% st_coordinates() %>% as.vector(), breaks = 5)
# Преобразуем зону обратно в UTM для дальнейших операций
service.area.utm <- st_transform(st_as_sf(service.area), UTM)
library(osrm) # Использование онлайн-сервиса маршрутизации OSRM
library(sf)
library(dplyr)
library(classInt)
library(osrm) # Использование онлайн-сервиса маршрутизации OSRM
library(cartography) # Удобное построение тематических карт средствами plot()
psel <- poi %>% filter(NAME == "Порше Центр Москва" & SHOP == "car")
# Преобразуем координаты точки в WGS84
psel.wgs <- st_transform(psel, WGS84)
# Получаем 5-минутную зону транспортной доступности
# с помощью пакета osrm
service.area <- osrmIsochrone(psel.wgs %>% st_coordinates() %>% as.vector(), breaks = 5)
# Преобразуем зону обратно в UTM для дальнейших операций
service.area.utm <- st_transform(st_as_sf(service.area), UTM)
# Отбираем точки
selected.poi <- poi.food[service.area.utm, ]
# Визуализируем результат
plotBasemap()
plot(service.area.utm %>% st_geometry(),
col = adjustcolor("violetred3", alpha.f = 0.2),
border = "violetred3",
add = TRUE)
plot(selected.poi  %>% st_geometry(),
col = "violetred3",
pch = 20,
cex = 0.5,
add = TRUE)
psel <- poi %>% filter(NAME == "Нотариус Зюнина Елена Вильевна" & OFFICE == "lawyer")
# Преобразуем координаты точки в WGS84
psel.wgs <- st_transform(psel, WGS84)
# Получаем 5-минутную зону транспортной доступности
# с помощью пакета osrm
service.area <- osrmIsochrone(psel.wgs %>% st_coordinates() %>% as.vector(), breaks = 5)
# Преобразуем зону обратно в UTM для дальнейших операций
service.area.utm <- st_transform(st_as_sf(service.area), UTM)
# Отбираем точки
selected.poi <- poi.food[service.area.utm, ]
# Визуализируем результат
plotBasemap()
plot(service.area.utm %>% st_geometry(),
col = adjustcolor("violetred3", alpha.f = 0.2),
border = "violetred3",
add = TRUE)
plot(selected.poi  %>% st_geometry(),
col = "violetred3",
pch = 20,
cex = 0.5,
add = TRUE)
plot(psel %>% st_geometry(),
col = "violetred4",
pch = 20,
cex = 4,
add = TRUE)
# Выбираем и проецируем начальную точку
origin <- poi %>% filter(NAME == 'Молодая Гвардия')
origin.wgs <- st_transform(origin, WGS84)
# Выбираем и проецируем конечную точку
destination <- poi %>% filter(NAME == 'Чебуречная "Дружба"')
destination.wgs <- st_transform(destination, WGS84)
# Строим маршрут
route <- osrmRoute(origin.wgs %>% as('Spatial'),
destination.wgs %>% as('Spatial'),
overview = "full", # запретить генерализацию линий
sp = TRUE) # вернуть результат в виде объекта класса Spatial
# Преобразуем результат обратно в UTM
route.utm <- st_transform(route %>% st_as_sf(), UTM)
# Визуализируем результат:
plotBasemap()
plot(route.utm %>% st_geometry(),
lwd = 3,
col = "orange",
add = TRUE)
plot(origin %>% st_geometry(),
col = "tomato3",
pch = 20,
cex = 3,
add = TRUE)
text(origin %>% st_coordinates(),
labels = "O",
col = "tomato4",
cex = 0.5)
plot(destination %>% st_geometry(),
col = "tomato",
pch = 20,
cex = 4,
add = TRUE)
text(destination %>% st_coordinates(),
labels = "D",
col = "tomato4",
cex = 0.7)
library(sf)
library(openxlsx) # Чтение файлов Excel
library(lattice) # Пакет lattice используется для построения серий карт/графиков
library(classInt) # Пакет classInt реализует методы классификации данных
library(RColorBrewer) # Цветовые шкалы
library(sp)
library(Cairo)
setwd("C:/Users/Lera/Desktop/4 level/MKK/date 7")
regi <- read_sf("Regions.gpkg") # таблица с регионами
tabl <- read.xlsx("Stats.xlsx") # таблица со статистикой
# соединение таблиц
regi <- merge(regi, tabl, by.x="TARGET_FID", by.y="FID")
#извлекаем данные с 2010 по 2013 год
stat <- c(regi$X2010, regi$X2011, regi$X2012, regi$X2013)
# число классов
ncl <- 5
# отрисовка карт и графиков
CairoPDF("Results.pdf", width = 10, height = 10)
par(mfrow=c(2,2))
par(mar=c(5,4,5,6))
# подготовка цветовой шкалы
ramppal <- colorRampPalette(c("pink", "purple3"))
# классификация методом равных интервалов
interv1 <- classIntervals(stat, n = ncl, style = "equal")
interv1$brks
# классификация методом равных округленных интервалов
interv2 <- classIntervals(stat, n = ncl, style = "pretty")
interv2$brks
# классификация методом квантилей
interv3 <- classIntervals(stat, n = ncl, style = "quantile")
interv3$brks
# классификация методом естественных интервалов
interv4 <- classIntervals(stat, n = ncl, style = "jenks")
interv4$brks
# построение графиков
par(mfrow=c(2,2))
plot(interv1, pal = ramppal(ncl), cex=0.5, main = "Метод равных интервалов")
plot(interv2, pal = ramppal(ncl), cex=0.5, main = "Метод равных округленных интервалов")
plot(interv3, pal = ramppal(ncl), cex=0.5, main = "Метод квантилей")
plot(interv4, pal = ramppal(ncl), cex=0.5, main = "Метод естественных интервалов")
# построение серии из 4 карт
spregi <- as(regi, 'Spatial')
spplot(spregi,
zcol = c("X2010", "X2011", "X2012", "X2013"),
names.attr = c("2010", "2011", "2012", "2013"),
at = interv2$brks,
col.regions = ramppal(ncl),
main = "Динамика числа собственных легковых \n автомобилей на 1000 человек населения",
cex.main = 0.5
)
dev.off() # завершение загрузки графиков и карт в файл
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
library(readxl)
emissions = read_excel('emissions.xlsx', 1,skip = 1)
capture = read_excel('emissions.xlsx', 2, skip = 1)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'x-mac-ukrainian', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'x-mac-ukrainian', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'x-mac-ukrainian', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'x-mac-ukrainian', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'x-mac-ukrainian', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', encoding = 'x-mac-ukrainian', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/3_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('C:/Users/gorba/Desktop/Univercity/3 курс/R/HW/2_Gorbarenko.R', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
